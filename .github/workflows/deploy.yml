name: Deploy

on:
  workflow_call:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}
  REGISTRY: docker.io
  API_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tasksync-api

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm@10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            **/dist
            **/build
            **/storybook-static
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

  deploy-api:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm@10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: pnpm turbo build --filter=@task-sync/api --cache-dir=.turbo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if has release tag
        id: check-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ "$LATEST_TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "has-tag=true" >> $GITHUB_OUTPUT
            echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "Found valid release tag: $LATEST_TAG"
          else
            echo "has-tag=false" >> $GITHUB_OUTPUT
            echo "latest-tag=" >> $GITHUB_OUTPUT
            echo "No valid release tag found"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.API_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.check-tag.outputs.latest-tag }},enable=${{ steps.check-tag.outputs.has-tag == 'true' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.check-tag.outputs.latest-tag }},enable=${{ steps.check-tag.outputs.has-tag == 'true' }}
            type=semver,pattern={{major}},value=${{ steps.check-tag.outputs.latest-tag }},enable=${{ steps.check-tag.outputs.has-tag == 'true' }}
            type=sha,prefix={{branch}}-,enable=${{ steps.check-tag.outputs.has-tag == 'false' }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

    outputs:
      tags: ${{ steps.meta.outputs.tags }}

  deploy-storybook:
    needs: setup
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.TURBO_TEAM }}
      VERCEL_PROJECT_ID: ${{ secrets.STORYBOOK_VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm@10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build workspace dependencies
        run: pnpm turbo build --filter=@task-sync/icons --filter=@task-sync/design-tokens --filter=@task-sync/ui-components --cache-dir=.turbo

      - name: Build Storybook
        run: pnpm turbo build --filter=@task-sync/storybook --cache-dir=.turbo

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.TURBO_TOKEN }}
        working-directory: ./packages/storybook

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.TURBO_TOKEN }}
        working-directory: ./packages/storybook

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.TURBO_TOKEN }}
        working-directory: ./packages/storybook

  notify-success:
    needs: [deploy-api, deploy-storybook]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Notify deployment success
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "âœ… API deployed to Docker Hub with tags: ${{ needs.deploy-api.outputs.tags || 'latest' }}"
          echo "âœ… Storybook deployed to Vercel"
