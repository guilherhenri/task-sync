name: Unit and E2E Tests

on:
  push:
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        run: npm install -g pnpm@10.12.3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

  backend:
    needs: setup
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
      - name: Install pnpm
        run: npm install -g pnpm@10.12.3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Start Docker Compose
        run: |
          docker-compose up -d
      - name: Wait for services
        run: |
          echo "Waiting for services to be healthy..."
          for service in postgres mongodb redis backend; do
            while [ "$(docker inspect --format='{{.State.Health.Status}}' $service)" != "healthy" ]; do
              echo "Waiting for $service to be healthy..."
              sleep 2
              if [ "$(docker inspect --format='{{.State.Status}}' $service)" != "running" ]; then
                echo "Service $service is not running. Showing logs..."
                docker-compose -f docker-compose.yml logs $service
                exit 1
              fi
            done
            echo "$service is healthy!"
          done
      - name: Unit tests
        run: pnpm test --filter=@task-sync/api
      - name: E2E tests
        env:
          NODE_ENV: test
          PORT: 3333
          APP_URL: http://localhost:3000
          LOGO_CDN_URL: ${{ secrets.LOGO_CDN_URL }}

          SMTP_HOST: sandbox.smtp.mailtrap.io
          SMTP_PORT: 2525
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_DEFAULT_SENDER: "suporte@tasksync.com"

          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USER: tasksync
          POSTGRES_PASSWORD: tasksync123
          POSTGRES_DB: tasksync_dev

          MONGO_URI: mongodb://localhost:27017/?authSource=admin
          MONGO_DB: tasksync_logs
          MONGO_USERNAME: tasksync
          MONGO_PASSWORD: tasksync123

          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          REDIS_DB: 0

          JWT_SECRET: your_jwt_secret
        run: pnpm test:e2e --filter=@task-sync/api
      - name: Show Docker Compose logs on failure
        if: failure()
        run: docker-compose -f docker-compose.yml logs
      - name: Stop Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.yml down
